Apache JMETER:
==============

The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. 

It was originally designed for testing Web Applications but has since expanded to other test functions.


What can I do with it?
======================

Apache JMeter may be used to test performance both on static and dynamic resources, Web dynamic applications.


It can be used to simulate a heavy load on a server, group of servers, network or object to test its strength or to analyze overall performance under different load types.

Apache JMeter features include:
-------------------------------

Ability to load and performance test many different applications/server/protocol types: 


    Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET, …)
    SOAP / REST Webservices
    FTP
    Database via JDBC
    LDAP
    Message-oriented middleware (MOM) via JMS
    Mail - SMTP(S), POP3(S) and IMAP(S)
    Native commands or shell scripts
    TCP
    Java Objects


Full featured Test IDE that allows fast Test Plan recording (from Browsers or native applications), building and debugging.

Command-line mode (Non GUI / headless mode) to load test from any Java compatible OS (Linux, Windows, Mac OSX, …)

A complete and ready to present dynamic HTML report
Easy correlation through ability to extract data from most popular response formats, HTML, JSON , XML or any textual format

Complete portability and 100% Java purity.

Full multi-threading framework

Allows concurrent sampling by many threads 

and 

simultaneous sampling of different functions by separate thread groups

Caching and offline analysis/replaying of test results.

Highly Extensible core:
-----------------------

Pluggable Samplers allow unlimited testing capabilities.

Scriptable Samplers (JSR223-compatible languages like Groovy and BeanShell)

Several load statistics may be chosen with pluggable timers.

Data analysis and visualization plugins allow great extensibility as well as personalization.

Functions can be used to provide dynamic input to a test or provide data manipulation.

Easy Continuous Integration through 3rd party Open Source libraries for Maven, Graddle and Jenkins


JMeter is not a browser:
------------------------

JMeter is not a browser, it works at protocol level. 

As far as web-services and remote services are concerned, JMeter looks like a browser (or rather, multiple browsers); 

however JMeter does not perform all the actions supported by browsers. 

In particular, JMeter does not execute the Javascript found in HTML pages. 

Nor does it render the HTML pages as a browser does (it's possible to view the response as HTML etc., but the timings are not included in any samples, and only one sample in one thread is ever displayed at a time). 

Using JMeter to understand how to use it:
-----------------------------------------

Test plan building
------------------

To do that, you will run JMeter in GUI Mode.
Then you can either choose to record the application from a browser, or native application. You can use for that the menu File ? Templates... ? Recording


 Note you can also manually build your plan. Ensure you read this documentation to understand major concepts.
You will also debug it using one of these options:

    Run ? Start no pauses
    Run ? Start
    Validate on Thread Group

and View Results Tree renderers or Testers (CSS/JQUERY, JSON, Regexp, XPath).
Ensure you follow best-practices when building your Test Plan. 

Load Test running:
------------------

Once your Test Plan is ready, you can start your Load Test. The first step is to configure the injectors that will run JMeter, this as for any other Load Testing tool includes: 


    Correct machine sizing in terms of CPU, memory and network
    OS Tuning
    Java setup: Ensure you install the latest version of Java supported by JMeter
    Increase the Java Heap size. By default JMeter runs with a heap of 1 GB, this might not be enough for your test and depends on your test plan and number of threads you want to run

Once everything is ready, you will use Command-line mode (called Non-GUI mode) to run it for the Load Test.

!!!Don't run load test using GUI mode !!!

Using Non-GUI mode, you can generate a CSV (or XML) file containing results and have JMeter generate an HTML report at end of Load Test. 

JMeter will by default provide a summary of load test while it's running.

Real-time results during your test using Backend Listener is also possible.


Load test Analysis:
-------------------

Once your Load Test is finished, you can use the HTML report to analyze your load test. 


The easiest way to begin using JMeter is to first download the latest production release and install it. 

The release contains all of the files you need to build and run most types of tests, e.g. Web (HTTP/HTTPS), FTP, JDBC, LDAP, Java, JUnit and more.

If you want to perform JDBC testing, then you will, of course, need the appropriate JDBC driver from your vendor. 

JMeter does not come with any JDBC drivers.

JMeter includes the JMS API jar, but does not include a JMS client implementation. 

If you want to run JMS tests, you will need to download the appropriate jars from the JMS provider. 

JMeter's Classpath

JMeter automatically finds classes from jars in the following directories:

JMETER_HOME/lib
    used for utility jars
JMETER_HOME/lib/ext
    used for JMeter components and plugins

If you have developed new JMeter components, then you should jar them and copy the jar into JMeter's lib/ext directory. JMeter will automatically find JMeter components in any jars found here. Do not use lib/ext for utility jars or dependency jars used by the plugins; it is only intended for JMeter components and plugins.

If you don't want to put JMeter plugin jars in the lib/ext directory, then define the property search_paths in jmeter.properties.

Utility and dependency jars (libraries etc) can be placed in the lib directory.

If you don't want to put such jars in the lib directory, then define the property user.classpath or plugin_dependency_paths in jmeter.properties. See below for an explanation of the differences.

Other jars (such as JDBC, JMS implementations and any other support libraries needed by the JMeter code) should be placed in the lib directory - not the lib/ext directory, or added to user.classpath.
JMeter will only find .jar files, not .zip.

You can also install utility Jar files in $JAVA_HOME/jre/lib/ext, or you can set the property user.classpath in jmeter.properties

Note that setting the CLASSPATH environment variable will have no effect. This is because JMeter is started with "java -jar", and the java command silently ignores the CLASSPATH variable, and the -classpath/-cp options when -jar is used.

This occurs with all Java programs, not just JMeter.

Create Test Plan from Template:
-------------------------------

You have the ability to create a new Test Plan from existing template.

To do so you use the menu File ? Templates… or Templates icon: 


(please refer doc)

A popup appears, you can then choose a template among the list: 

(please refer doc)


Using JMeter behind a proxy:
----------------------------

If you are testing from behind a firewall/proxy server, you may need to provide JMeter with the firewall/proxy server hostname and port number. To do so, run the jmeter[.bat] file from a command line with the following parameters:

-H
    [proxy server hostname or ip address]
-P
    [proxy server port]
-N
    [nonproxy hosts] (e.g. *.apache.org|localhost)
-u
    [username for proxy authentication - if required]
-a
    [password for proxy authentication - if required] 

jmeter -H my.proxy.server -P 8000 -u username -a password -N localhost

You can also use --proxyHost, --proxyPort, --username, and --password as parameter names
Parameters provided on a command-line may be visible to other users on the system.

If the proxy host and port are provided, then JMeter sets the following System properties:

    http.proxyHost
    http.proxyPort
    https.proxyHost
    https.proxyPort

If a nonproxy host list is provided, then JMeter sets the following System properties:

    http.nonProxyHosts
    https.nonProxyHosts

So if you don't wish to set both http and https proxies, you can define the relevant properties in system.properties instead of using the command-line parameters.

Proxy Settings can also be defined in a Test Plan, using either the HTTP Request Defaults configuration or the HTTP Request sampler elements.
JMeter also has its own in-built Proxy Server, the HTTP(S) Test Script Recorder. This is only used for recording HTTP or HTTPS browser sessions. This is not to be confused with the proxy settings described above, which are used when JMeter makes HTTP or HTTPS requests itself.


Non-GUI Mode (Command Line mode):
---------------------------------

For load testing, you must run JMeter in this mode (Without the GUI) to get the optimal results from it. To do so, use the following command options:

-n
    This specifies JMeter is to run in non-gui mode
-t
    [name of JMX file that contains the Test Plan].
-l
    [name of JTL file to log sample results to].
-j
    [name of JMeter run log file].
-r
    Run the test in the servers specified by the JMeter property "remote_hosts"
-R
    [list of remote servers] Run the test in the specified remote servers
-g
    [path to CSV file] generate report dashboard only
-e
    generate report dashboard after load test
-o
    output folder where to generate the report dashboard after load test. Folder must not exist or be empty

The script also lets you specify the optional firewall/proxy server information:

-H
    [proxy server hostname or ip address]
-P
    [proxy server port] 

jmeter -n -t my_test.jmx -l log.jtl -H my.proxy.server -P 8000

If the property jmeterengine.stopfail.system.exit is set to true (default is false), then JMeter will invoke System.exit(1) if it cannot stop all threads. Normally this is not necessary. 

Server Mode:
============

For distributed testing, run JMeter in server mode on the remote node(s), and then control the server(s) from the GUI. You can also use non-GUI mode to run remote tests. To start the server(s), run jmeter-server[.bat] on each server host.

The script also lets you specify the optional firewall/proxy server information:

-H
    [proxy server hostname or ip address]
-P
    [proxy server port] 

jmeter-server -H my.proxy.server -P 8000

If you want the server to exit after a single test has been run, then define the JMeter property server.exitaftertest=true.

To run the test from the client in non-GUI mode, use the following command:

jmeter -n -t testplan.jmx -r [-Gprop=val] [-Gglobal.properties] [-X]

where:

-G
    is used to define JMeter properties to be set in the servers
-X
    means exit the servers at the end of the test
-Rserver1,server2
    can be used instead of -r to provide a list of servers to start. Overrides remote_hosts, but does not define the property.

If the property jmeterengine.remote.system.exit is set to true (default is false), then JMeter will invoke System.exit(0) after stopping RMI at the end of a test. Normally this is not necessary. 

Overriding Properties Via The Command Line:
-------------------------------------------

Java system properties and JMeter properties can be overridden directly on the command lin (instead of modifying jmeter.properties). To do so, use the following options:

-D[prop_name]=[value]
    defines a java system property value.
-J[prop_name]=[value]
    defines a local JMeter property.
-G[prop_name]=[value]
    defines a JMeter property to be sent to all remote servers.
-G[propertyfile]
    defines a file containing JMeter properties to be sent to all remote servers.
-L[category]=[priority]
    overrides a logging setting, setting a particular category to the given priority level.

The -L flag can also be used without the category name to set the root logging level.

jmeter -Duser.dir=/home/mstover/jmeter_stuff \
    -Jremote_hosts=127.0.0.1 -Ljmeter.engine=DEBUG

jmeter -LDEBUG

The command line properties are processed early in startup, but after the logging system has been set up. 

Logging and error messages:
---------------------------

Since 3.2, JMeter logging is not configured through properties file(s) such as jmeter.properties any more, but it is configured through a Apache Log4j 2 configuration file (log4j2.xml in the directory from which JMeter was launched, by default) instead. Also, every code including JMeter and plugins MUST use SLF4J library to leave logs since 3.2. 

Here is an example log4j2.xml file which defines two log appenders and loggers for each category. 


<Configuration status="WARN" packages="org.apache.jmeter.gui.logging">

  <Appenders>

    <!-- The main log file appender to jmeter.log in the directory from which JMeter was launched, by default. -->
    <File name="jmeter-log" fileName="${sys:jmeter.logfile:-jmeter.log}" append="false">
      <PatternLayout>
        <pattern>%d %p %c{1.}: %m%n</pattern>
      </PatternLayout>
    </File>

    <!-- Log appender for GUI Log Viewer. See below. -->
    <GuiLogEvent name="gui-log-event">
      <PatternLayout>
        <pattern>%d %p %c{1.}: %m%n</pattern>
      </PatternLayout>
    </GuiLogEvent>

  </Appenders>

  <Loggers>

    <!-- Root logger -->
    <Root level="info">
      <AppenderRef ref="jmeter-log" />
      <AppenderRef ref="gui-log-event" />
    </Root>

    <!-- SNIP -->

    <!--
      # Apache HttpClient logging examples
    -->
    <!-- # Enable header wire + context logging - Best for Debugging -->
    <!--
    <Logger name="org.apache.http" level="debug" />
    <Logger name="org.apache.http.wire" level="error" />
    -->

    <!-- SNIP -->

  </Loggers>

</Configuration>



So, if you want to change the log level for org.apache.http category to debug level for instance, you can simply add (or uncomment) the following logger element in log4j2.xml file before launching JMeter. 


<Loggers>
    <!-- SNIP -->
    <Logger name="org.apache.http" level="debug" />
    <!-- SNIP -->
  </Loggers>


 Log level for specific categories or root logger can be overridden directly on the command line (instead of modifying log4j2.xml) as well. To do so, use the following options:

-L[category]=[priority]
    Overrides a logging setting, setting a particular category to the given priority level. Since 3.2, it is recommended to use a full category name (e.g, org.apache.jmeter or com.example.foo), but if the category name starts with either jmeter or jorphan, org.apache. will be prepended internally to the category name input to construct a full category name (i.e, org.apache.jmeter or org.apache.jorphan) for backward compatibility. 


jmeter -Ljmeter.engine=DEBUG

jmeter -Lorg.apache.jmeter.engine=DEBUG

jmeter -Lcom.example.foo=DEBUG

jmeter -LDEBUG


 Differences in Logging : Old vs New Practices:

As JMeter uses SLF4J as logging API and Apache Log4j 2 as a logging framework since 3.2, not every log level used before 3.2 can match exactly with one of the new available log levels provided by SLF4J/Log4j2. Therefore, please keep the following differences and new suggested practices in mind if you need to migrate any existing logging configurations and logging code. 


 JMeter does not generally use pop-up dialog boxes for errors, as these would interfere with running tests. Nor does it report any error for a mis-spelt variable or function; instead the reference is just used as is. See Functions and Variables for more information.

If JMeter detects an error during a test, a message will be written to the log file. The log file name is defined in the log4j2.xml file (or using the -j option, see below). It defaults to jmeter.log, and will be found in the directory from which JMeter was launched.

The menu Options ? Log Viewer displays the log file in a bottom pane on main JMeter window. 

In the GUI mode, the number of error/fatal messages logged in the log file is displayed at top-right. 

 The command-line option -j jmeterlogfile allow to process after the initial properties file is read, and before any further properties are processed. It therefore allows the default of jmeter.log to be overridden. The jmeter scripts that take a test plan name as a parameter (e.g. jmeter-n.cmd) have been updated to define the log file using the test plan name, e.g. for the test plan Test27.jmx the log file is set to Test27.log.

When running on Windows, the file may appear as just jmeter unless you have set Windows to show file extensions. [Which you should do anyway, to make it easier to detect viruses and other nasties that pretend to be text files …] 

Full list of command-line options

Invoking JMeter as "jmeter -?" will print a list of all the command-line options. These are shown below.

    --?
        print command line options and exit
    -h, --help
        print usage information and exit
    -v, --version
        print the version information and exit
    -p, --propfile <argument>
        the jmeter property file to use
    -q, --addprop <argument>
        additional JMeter property file(s)
    -t, --testfile <argument>
        the jmeter test(.jmx) file to run
    -l, --logfile <argument>
        the file to log samples to
    -i, --jmeterlogconf <argument>
        jmeter logging configuration file (log4j2.xml)
    -j, --jmeterlogfile <argument>
        jmeter run log file (jmeter.log)
    -n, --nongui
        run JMeter in nongui mode
    -s, --server
        run the JMeter server
    -H, --proxyHost <argument>
        Set a proxy server for JMeter to use
    -P, --proxyPort <argument>
        Set proxy server port for JMeter to use
    -N, --nonProxyHosts <argument>
        Set nonproxy host list (e.g. *.apache.org|localhost)
    -u, --username <argument>
        Set username for proxy server that JMeter is to use
    -a, --password <argument>
        Set password for proxy server that JMeter is to use
    -J, --jmeterproperty <argument>=<value>
        Define additional JMeter properties
    -G, --globalproperty <argument>=<value>
        Define Global properties (sent to servers)
        e.g. -Gport=123
         or -Gglobal.properties
    -D, --systemproperty <argument>=<value>
        Define additional system properties
    -S, --systemPropertyFile <argument>
        additional system property file(s)
    -f, --forceDeleteResultFile
        force delete existing results files before start the test
    -L, --loglevel <argument>=<value>
        [category=]level e.g. jorphan=INFO, jmeter.util=DEBUG or com.example.foo=WARN
    -r, --runremote
        Start remote servers (as defined in remote_hosts)
    -R, --remotestart <argument>
        Start these remote servers (overrides remote_hosts)
    -d, --homedir <argument>
        the jmeter home directory to use
    -X, --remoteexit
        Exit the remote servers at end of test (non-GUI)
    -g, --reportonly <argument>
        generate report dashboard only, from a test results file
    -e, --reportatendofloadtests
        generate report dashboard after load test
    -o, --reportoutputfolder <argument>
        output folder for report dashboard

Note: the JMeter log file name is formatted as a SimpleDateFormat (applied to the current date) if it contains paired single-quotes, .e.g. 'jmeter_'yyyyMMddHHmmss'.log'

If the special name LAST is used for the -t, -j or -l flags, then JMeter takes that to mean the last test plan that was run in interactive mode. 

non-GUI shutdown

Prior to version 2.5.1, JMeter invoked System.exit() when a non-GUI test completed. This caused problems for applications that invoke JMeter directly, so JMeter no longer invokes System.exit() for a normal test completion. [Some fatal errors may still invoke System.exit()] JMeter will exit all the non-daemon threads it starts, but it is possible that some non-daemon threads may still remain; these will prevent the JVM from exiting. To detect this situation, JMeter starts a new daemon thread just before it exits. This daemon thread waits a short while; if it returns from the wait, then clearly the JVM has not been able to exit, and the thread prints a message to say why.

The property jmeter.exit.check.pause can be used to override the default pause of 2000ms (2secs). If set to 0, then JMeter does not start the daemon thread. 

Configuring JMeter:
-------------------

If you wish to modify the properties with which JMeter runs you need to either modify the user.properties in the /bin directory or create your own copy of the jmeter.properties and specify it in the command line.


Note: You can define additional JMeter properties in the file defined by the JMeter property user.properties which has the default value user.properties. The file will be automatically loaded if it is found in the current directory or if it is found in the JMeter bin directory. 

Similarly, system.properties is used to update system properties. 


Parameters
Attribute
Description
Required
ssl.provider
You can specify the class for your SSL implementation if you don't want to use the built-in Java implementation.
No
xml.parser
You can specify an implementation as your XML parser. The default value is: org.apache.xerces.parsers.SAXParser
No
remote_hosts
Comma-delimited list of remote JMeter hosts (or host:port if required). If you are running JMeter in a distributed environment, list the machines where you have JMeter remote servers running. This will allow you to control those servers from this machine's GUI
No
not_in_menu
A list of components you do not want to see in JMeter's menus. As JMeter has more and more components added, you may wish to customize your JMeter to show only those components you are interested in. You may list their classname or their class label (the string that appears in JMeter's UI) here, and they will no longer appear in the menus.
No
search_paths
List of paths (separated by ;) that JMeter will search for JMeter plugin classes, for example additional samplers. A path item can either be a jar file or a directory. Any jar file in such a directory will be automatically included in search_paths, jar files in sub directories are ignored. The given value is in addition to any jars found in the lib/ext directory.
No
user.classpath
List of paths that JMeter will search for utility and plugin dependency classes. Use your platform path separator to separate multiple paths. A path item can either be a jar file or a directory. Any jar file in such a directory will be automatically included in user.classpath, jar files in sub directories are ignored. The given value is in addition to any jars found in the lib directory. All entries will be added to the class path of the system class loader and also to the path of the JMeter internal loader.
No
plugin_dependency_paths
List of paths (separated by ;) that JMeter will search for utility and plugin dependency classes. A path item can either be a jar file or a directory. Any jar file in such a directory will be automatically included in plugin_dependency_paths, jar files in sub directories are ignored. The given value is in addition to any jars found in the lib directory or given by the user.classpath property. All entries will be added to the path of the JMeter internal loader only. For plugin dependencies using plugin_dependency_paths should be preferred over user.classpath.
No
user.properties
Name of file containing additional JMeter properties. These are added after the initial property file, but before the -q and -J options are processed.
No
system.properties
Name of file containing additional system properties. These are added before the -S and -D options are processed.
No

The command line options and properties files are processed in the following order:

    -p propfile
    jmeter.properties (or the file from the -p option) is then loaded
    -j logfile
    Logging is initialised
    user.properties is loaded
    system.properties is loaded
    all other command-line options are processed


The command line options and properties files are processed in the following order:

    -p propfile
    jmeter.properties (or the file from the -p option) is then loaded
    -j logfile
    Logging is initialised
    user.properties is loaded
    system.properties is loaded
    all other command-line options are processed

See also the comments in the jmeter.properties, user.properties and system.properties files for further information on other settings you can change. 

Next, start JMeter and go through the Building a Test Plan section of the User Guide to familiarize yourself with JMeter basics (for example, adding and removing elements).

Finally, go through the appropriate section on how to build a specific type of Test Plan. For example, if you are interested in testing a Web application, then see the section Building a Web Test Plan. The other specific Test Plan sections are: 


    Advanced Web Test Plan
    JDBC
    FTP
    JMS Point-to-Point
    JMS Topic
    LDAP
    LDAP Extended
    WebServices (SOAP)


For me:
========

    LDAP
    LDAP Extended

Once you are comfortable with building and running JMeter Test Plans, you can look into the various configuration elements (timers, listeners, assertions, and others) which give you more control over your Test Plans.

Building an LDAP Test Plan:
---------------------------

In this section, you will learn how to create a basic Test Plan to test an LDAP server. You will create four users that send requests for four tests on the LDAP server. Also, you will tell the users to run their tests 4 times. So, the total number of requests is (4 users) x (4 requests) x (repeat 4 times) = 64 LDAP requests. To construct the Test Plan, you will use the following elements: Thread Group, LDAP Request, LDAP Request Defaults, and View Results in Table .

Adding Users:
-------------

The first step you want to do with every JMeter Test Plan is to add a Thread Group element. The Thread Group tells JMeter the number of users you want to simulate, how often the users should send requests, and the how many requests they should send.

Go ahead and add the ThreadGroup element by first selecting the Test Plan, clicking your right mouse button to get the Add menu, and then select Add ? ThreadGroup. You should now see the Thread Group element under Test Plan. If you do not see the element, then "expand" the Test Plan tree by clicking on the Test Plan element. 


Adding Login Config Element:
----------------------------

Begin by selecting the LDAP Users element. Click your right mouse button to get the Add menu, and then select Add ? Config Element ? Login Config Element. Then, select this new element to view its Control Panel.

Like most JMeter elements, the Login Config Element's Control Panel has a name field that you can modify. In this example, leave this field with the default value.



Enter Username field to "your LDAP Username",
The password field to "your LDAP Password"

These values will be used by the LDAP Requests.


Adding LDAP Request Defaults:
=============================

Begin by selecting the LDAP Users element. Click your right mouse button to get the Add menu, and then select Add ? Config Element ? LDAP Request Defaults. Then, select this new element to view its Control Panel.

Like most JMeter elements, the LDAP Request Defaults Control Panel has a name field that you can modify. In this example, leave this field with the default value.

Enter DN field to "your LDAP Root Distinguished Name".
Enter LDAP Server's Servername field to "ldap.test.com".
The port to 389.
These values are default for the LDAP Requests.

Adding LDAP Requests:
---------------------

In our Test Plan, we need to make four LDAP requests.

    Inbuilt Add Test
    Inbuilt Search Test
    Inbuilt Modify Test
    Inbuilt Delete Test

JMeter sends requests in the order that you add them to the tree. Start by adding the first LDAP Request to the LDAP Users element (Add ? Sampler ? LDAP Request). Then, select the LDAP Request element in the tree and edit the following properties

    Rename to "Add" this element
    Select the Add Test radio button in Test Configuration group


You do not have to set the Servername field, port field, Username, Password and DN because you already specified this value in the Login Config Element and LDAP Request Defaults.

Next, add the second LDAP Request and edit the following properties

    Rename to "Search" this element
    Select the Search Test radio button in Test Configuration group


Next, add the Third LDAP Request and edit the following properties 


    Rename to "Modify" this element
    Select the Modify Test radio button in Test Configuration group


Next, add the fourth LDAP Request and edit the following properties 


    Rename to "Delete" this element
    Select the Delete Test radio button in Test Configuration group


Adding a Response Assertion:
----------------------------

You can add a Response Assertion element. This element will check the received response data by verifying if the response text is "successful". (Add ? Assertion ? Response Assertion).
Note: A this position in the tree, the Response Assertion will be executed for each LDAP Request.

    Select Text Response Radio button in Response Field to Test group
    Select Substring Radio button in Pattern Matching Rules group
    Click on Add button and add the string "successful" in Pattern to Test field


Adding a Listener to View/Store the Test Results:
-------------------------------------------------

The final element you need to add to your Test Plan is a Listener. This element is responsible for storing all of the results of your LDAP requests in a file and presenting a visual model of the data. Select the LDAP Users element and add a View Results in Table (Add ? Listener ? View Results in Table)





Component reference to have detailed information for every Test element:
-----------------------------------------------------------------------

Functions reference to have detailed information and examples for every function:
--------------------------------------------------------------------------------

Properties reference for all properties that allow you to customize JMeter:
--------------------------------------------------------------------------



Javadoc API documentation:
-------------------------

JMeter FAQ (Wiki):
-----------------

JMeter Wiki:
-----------

Building JMeter and Add-Ons for advanced usage:
----------------------------------------------

Distributed Testing:
--------------------

Recording Tests:
----------------

JUnit Sampler:
--------------

Access Log Sampler:
-------------------

Extending JMeter:
-----------------

Changes List:
-------------

Read about existing Issues (Bugs or Enhancements) or reporting new ones:
------------------------------------------------------------------------

Source Repositories:
--------------------

Mailing Lists:
--------------
