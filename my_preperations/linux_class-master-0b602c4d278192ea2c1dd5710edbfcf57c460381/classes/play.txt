---
- name: Install Java 1.7 and some basic dependencies
  yum: name={{item}} state=present
  with_items:
   - unzip
   - java-1.7.0-openjdk

- name: Download JBoss from jboss.org
  get_url: url=http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip dest=/opt/jboss-as-7.1.1.Final.zip

- name: Extract archive
  command: chdir=/usr/share /usr/bin/unzip -q /opt/jboss-as-7.1.1.Final.zip creates=/usr/share/jboss-as

  # Rename the dir to avoid encoding the version in the init script
- name: Rename install directory
  command: chdir=/usr/share /bin/mv jboss-as-7.1.1.Final jboss-as creates=/usr/share/jboss-as

- name: Copying standalone.xml configuration file
  template: src=standalone.xml dest=/usr/share/jboss-as/standalone/configuration/
  notify: restart jboss

- name: Add group "jboss"
  group: name=jboss

- name: Add user "jboss"
  user: name=jboss group=jboss home=/usr/share/jboss-as

- name: Change ownership of JBoss installation
  file: path=/usr/share/jboss-as/ owner=jboss group=jboss state=directory recurse=yes

- name: Copy the init script
  copy: src=jboss-as-standalone.sh dest=/etc/init.d/jboss mode=0755

- name: Enable JBoss to be started at boot
  service: name=jboss enabled=yes state=started

- name: deploy iptables rules
  template: src=iptables-save dest=/etc/sysconfig/iptables
notify: restart iptables




---
- name: Install Java 1.7 and some basic dependencies
  yum: name={{item}} state=present
  with_items:
   - unzip
   - java-1.7.0-openjdk

- name: Download JBoss from jboss.org
  get_url: url=http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip dest=/opt/jboss-as-7.1.1.Final.zip

- name: Extract archive
  command: chdir=/usr/share /usr/bin/unzip -q /opt/jboss-as-7.1.1.Final.zip creates=/usr/share/jboss-as

  # Rename the dir to avoid encoding the version in the init script
- name: Rename install directory
  command: chdir=/usr/share /bin/mv jboss-as-7.1.1.Final jboss-as creates=/usr/share/jboss-as

- name: Copying standalone.xml configuration file
  template: src=standalone.xml dest=/usr/share/jboss-as/standalone/configuration/
  notify: restart jboss

- name: Add group "jboss"
  group: name=jboss

- name: Add user "jboss"
  user: name=jboss group=jboss home=/usr/share/jboss-as

- name: Change ownership of JBoss installation
  file: path=/usr/share/jboss-as/ owner=jboss group=jboss state=directory recurse=yes

- name: Copy the init script
  copy: src=jboss-as-standalone.sh dest=/etc/init.d/jboss mode=0755

- name: Enable JBoss to be started at boot
  service: name=jboss enabled=yes state=started

- name: deploy iptables rules
  template: src=iptables-save dest=/etc/sysconfig/iptables
notify: restart iptables


---
# This playbook deploys a simple standalone JBoss server.

- hosts: jboss-servers
  remote_user: root

  roles:
- jboss-standalone


---
# This role contains common plays that will run on all nodes.

- name: Install python bindings for SE Linux
  yum: name={{ item }} state=present
  with_items:
   - libselinux-python
   - libsemanage-python

- name: Create the repository for EPEL
  copy: src=epel.repo dest=/etc/yum.repos.d/epel.repo

- name: Create the GPG key for EPEL
  copy: src=RPM-GPG-KEY-EPEL-6 dest=/etc/pki/rpm-gpg

- name: install some useful nagios plugins
  yum: name={{ item }} state=present
  with_items:
   - nagios-nrpe
   - nagios-plugins-swap
   - nagios-plugins-users
   - nagios-plugins-procs
   - nagios-plugins-load
   - nagios-plugins-disk

- name: Install ntp
  yum: name=ntp state=present
  tags: ntp

- name: Configure ntp file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  tags: ntp
  notify: restart ntp

- name: Start the ntp service
  service: name=ntpd state=started enabled=yes
  tags: ntp

- name: insert iptables template
  template: src=iptables.j2 dest=/etc/sysconfig/iptables
  notify: restart iptables

- name: test to see if selinux is running
  command: getenforce
  register: sestatus
changed_when: false

---
# This role will install MySQL and create db user and give permissions.

- name: Install Mysql package
  yum: name={{ item }} state=present
  with_items:
   - mysql-server
   - MySQL-python

- name: Configure SELinux to start mysql on any port
  seboolean: name=mysql_connect_any state=true persistent=yes
  when: sestatus.rc != 0

- name: Create Mysql configuration file
  template: src=my.cnf.j2 dest=/etc/my.cnf
  notify:
  - restart mysql

- name: Start Mysql Service
  service: name=mysqld state=started enabled=yes

- name: Create Application Database
  mysql_db: name={{ dbname }} state=present

- name: Create Application DB User
mysql_user: name={{ dbuser }} password={{ upassword }} priv=*.*:ALL host='%' state=present


---
# handlers for nagios
- name: restart httpd
  service: name=httpd state=restarted

- name: restart nagios
service: name=nagios state=restarted


---

# httpd is handled by the base-apache role upstream
- name: Install php and git
  yum: name={{ item }} state=present
  with_items:
   - php
   - php-mysql
   - git

- name: Configure SELinux to allow httpd to connect to remote database
  seboolean: name=httpd_can_network_connect_db state=true persistent=yes
  when: sestatus.rc != 0

- name: Copy the code from repository
git: repo={{ repository }} version={{ webapp_version }} dest=/var/www/html/


---
# This playbook deploys the whole application stack in this site.

# Apply common configuration to all hosts
- hosts: all
  remote_user: root
  roles:
  - common

# Configure and deploy database servers.
- hosts: dbservers
  remote_user: root
  roles:
  - db

# Configure and deploy the web servers. Note that we include two roles here,
# the 'base-apache' role which simply sets up Apache, and 'web' which includes
# our example web application.
- hosts: webservers
  remote_user: root
  roles:
  - base-apache
  - web

# Configure and deploy the load balancer(s).
- hosts: lbservers
  remote_user: root
  roles:
  - haproxy

# Configure and deploy the Nagios monitoring node(s).
- hosts: monitoring
  remote_user: root
  roles:
  - base-apache
- nagios


---
# This playbook contains common plays that will be run on all nodes.

- name: Install ntp
  yum: name=ntp state=present
  tags: ntp

- name: Configure ntp file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  tags: ntp
  notify: restart ntp

- name: Start the ntp service
  service: name=ntpd state=started enabled=yes
  tags: ntp

- name: test to see if selinux is running
  command: getenforce
  register: sestatus
changed_when: false


---
# These tasks install http and the php modules.

- name: Install http and php etc
  yum: name={{ item }} state=present
  with_items:
   - httpd
   - php
   - php-mysql
   - git
   - libsemanage-python
   - libselinux-python

- name: insert iptables rule for httpd
  lineinfile: dest=/etc/sysconfig/iptables create=yes state=present regexp="{{ httpd_port }}" insertafter="^:OUTPUT "
              line="-A INPUT -p tcp  --dport {{ httpd_port }} -j  ACCEPT"
  notify: restart iptables

- name: http service state
  service: name=httpd state=started enabled=yes

- name: Configure SELinux to allow httpd to connect to remote database
  seboolean: name=httpd_can_network_connect_db state=true persistent=yes
when: sestatus.rc != 0


---
# These tasks are responsible for copying the latest dev/production code from
# the version control system.

- name: Copy the code from repository
  git: repo={{ repository }} dest=/var/www/html/

- name: Creates the index.php file
template: src=index.php.j2 dest=/var/www/html/index.php


---

# this is an example of how we can perform actions on a given host on behalf of all the hosts
# in a play.
#
# The two main uses of this would be signalling an outage window for hosts that
# we are going to start upgrading, or to take a machine out of rotation by talking to a load
# balancer.
#
# This example cheats by replacing the load balancer script with the 'echo' command,
# leaving actual communication with the load balancer as an exercise to the reader.  In reality,
# you could call anything you want, the main thing is that it should do something with
# {{inventory_hostname}}

# NOTE: see batch_size_control.yml for an example of the 'serial' keyword, which you almost certainly
# want to use in this kind of example.  Here we have a mocked up example that does something to
# 5 hosts at a time

- hosts: all
  serial: 5

  tasks:

  - name: take the machine out of rotation
    command: echo taking out of rotation {{inventory_hostname}}
    delegate_to: 127.0.0.1

# here's an alternate notation if you are delegating to 127.0.0.1, you can use 'local_action'
# instead of 'action' and leave off the 'delegate_to' part.
#
# - local_action: command echo taking out of rotation {{inventory_hostname}}

  - name: do several things on the actual host
    command: echo hi mom {{inventory_hostname}}

  - name: put machine back into rotation
    command: echo inserting into rotation {{inventory_hostname}}
delegate_to: 127.0.0.1




centos1lxc.veecube.com
centos2lxc.veecube.com
centos3lxc.veecube.com
centos4lxc.veecube.com
centos5lxc.veecube.com
centos6lxc.veecube.com
centos7lxc.veecube.com
centos8lxc.veecube.com


---
- hosts: clients
- name: Add bind-utils to the clients and the web_server
  yum:
    name: bind-utils
    state: latest
