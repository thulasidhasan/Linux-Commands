Install:
========

yum update

yum install git

git --version

git config --global user.name "testuser"

git config --global user.email "testuser@example.com"

cd

cat .gitconfig

git config --list





git init

 

git status

 

git add octocat.txt

 

git commit -m "Add cute octocat story"

 

git add '*.txt'

 

git commit -m 'Add all the octocat txt files'

 

git log

 

git remote add origin https://github.com/try-git/try_git.git

 

git push -u origin master

 

git pull origin master

 

git diff HEAD

 

git add octofamily/octodog.txt

 

git diff --staged

 

git reset octofamily/octodog.txt

 

git checkout -- octocat.txt

 

git checkout clean_up

 

git checkout clean_up

 

git rm '*.txt'

 

git commit -m "Remove all the cats"

 

git checkout master

 

git merge clean_up

 

git branch -d clean_up

 

Collabration Issues:

-------------------

 

For eg.,

 

Versions of an FTP uploaded file been altered by two people with no coordination.

 

Solution: GIT

=============

 

Merge 

-----

 

file content ---->

                  <---- file content

 

time capsule  ----------|

           -------------|

                      --|

 

Centralyzed Repository Vs Distributed Repository:

------------------------------------------------

 

Multiple People makes changes and commits:

 

Everybody has the complete copy of their Repo

 

Commits quickly and work Offline

 

DVCS : Distributed Version control system:

-----------------------------------------

 

"git-scm.com"

 

1) git help

 

2) git help <command>

 

3) git config --global user.name "gowrivel"

 

4) git config --global user.email gowri777@yahoo.com

 

5) git config --global color.ui true

 

6) mkdir store ; cd store

 

7) git init #(Initialized empty Git repo in store/.git

 

8) start as untracked

 

9) Add file to staging area #(Getting ready to take a picture)

 

10) Commit changes #(a snapshot of those on the stage)

 

11) modify the file & add a License

 

12) Add both files to staging area

 

13) Commit changes

 

Commands:

=========

 

1) git status    #(to check what is changed since last commit)

 

2) our newly created file is not been tracked

 

3) git add <file_name>

 

4) git status

 

5) our newly created file is ready to be staged

 

First Commit:

=============

 

1) git commit -m "<Description>"  (creates a snapshot of the

 staging and creates a time line --- called master)

 

2) git status   (see --- no new modified files since last commit) (nothing to commit -- working dir is clean)

 

Modifiying the commited file and adding Lincense:

-------------------------------------------------

 

1) Added a file called License to the working dir

 

2) git status   #(reflects that one new file license is untracked)

 

3) git add <commited_file> License

 

OR ---

 

3) git add --all  #(adds all new or modified files)

 

4) git status     #(Again see the status, we have two files to be commited)

 

5) git commit -m "Add License and finish <newly_comited file> ."  #(creates a snapshot and add over time line)

 

6) Now we have two files commited

 

7) git log    #(shows the history) #(in larger projects -- commit messages are very important)

 

Different ways to add:

----------------------

 

1) git add <list of files>

 

2) git add all    #(all in working dir)

 

3) git add *.txt  #(wild cards allowed)

 

4) git add <absolute_path/file* --wildcard>

 

5) git add docs/  #(all files of the dir)

 

6) git add "*.txt" #(add all the txt files in the whole project)


Global:
-------

 


How To Set Up a Private Git Server on a VPS:
--------------------------------------------

Create the SSH Key Pair

ssh-keygen -C "youremail@mailprovider.com"

Log into your VPS, and gain root*:

su -

useradd git

passwd git

su git

mkdir ~/.ssh && touch ~/.ssh/authorized_keys

su -

cat .ssh/id_rsa.pub | ssh git@123.45.56.78 "cat >> ~/.ssh/authorized_keys"

su git

cat ~/.ssh/authorized_keys

To create that folder as an empty Git repository:
-------------------------------------------------

git init --bare my-project.git

to a exiting repo:
------------------

git remote set-url origin git@<host>:my-project.git

to a new repo:
--------------

git init && git remote add origin git@<host>:my-project.git

Now you may add, push, pull, and even clone away knowing that your code is only accessible to yourself.

But what if you want a few trusted people to have access to this server and you want to keep things simple by sorting them by the names of your users? A simple and effective way to do that is to create a folder named after each person, so in the home folder for your Git user list, input:

mkdir user1 user2

Now when you specify the remote repository, it would look like this:

git remote add origin git@git.droplet.com:user1/user-project.git

