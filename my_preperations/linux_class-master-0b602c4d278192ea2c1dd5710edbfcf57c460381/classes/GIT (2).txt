	Install:
========

yum update

yum install git

git --version

git config --global user.name "testuser"

git config --global user.email "testuser@example.com"

cd

cat .gitconfig

git config --list





git init

 

git status

 

git add octocat.txt

 

git commit -m "Add cute octocat story"

 

git add '*.txt'

 

git commit -m 'Add all the octocat txt files'

 

git log

 

git remote add origin https://github.com/try-git/try_git.git

 

git push -u origin master

 

git pull origin master

 

git diff HEAD

 

git add octofamily/octodog.txt

 

git diff --staged

 

git reset octofamily/octodog.txt

 

git checkout -- octocat.txt

 

git checkout clean_up

 

git checkout clean_up

 

git rm '*.txt'

 

git commit -m "Remove all the cats"

 

git checkout master

 

git merge clean_up

 

git branch -d clean_up

 

Collabration Issues:

-------------------

 

For eg.,

 

Versions of an FTP uploaded file been altered by two people with no coordination.

 

Solution: GIT

=============

 

Merge 

-----

 

file content ---->

                  <---- file content

 

time capsule  ----------|

           -------------|

                      --|

 

Centralyzed Repository Vs Distributed Repository:

------------------------------------------------

 

Multiple People makes changes and commits:

 

Everybody has the complete copy of their Repo

 

Commits quickly and work Offline

 

DVCS : Distributed Version control system:

-----------------------------------------

 

"git-scm.com"

 

1) git help

 

2) git help <command>

 

3) git config --global user.name "gowrivel"

 

4) git config --global user.email gowri777@yahoo.com

 

5) git config --global color.ui true

 

6) mkdir store ; cd store

 

7) git init #(Initialized empty Git repo in store/.git

 

8) start as untracked

 

9) Add file to staging area #(Getting ready to take a picture)

 

10) Commit changes #(a snapshot of those on the stage)

 

11) modify the file & add a License

 

12) Add both files to staging area

 

13) Commit changes

 

Commands:

=========

 

1) git status    #(to check what is changed since last commit)

 

2) our newly created file is not been tracked

 

3) git add <file_name>

 

4) git status

 

5) our newly created file is ready to be staged

 

First Commit:

=============

 

1) git commit -m "<Description>"  (creates a snapshot of the

 staging and creates a time line --- called master)

 

2) git status   (see --- no new modified files since last commit) (nothing to commit -- working dir is clean)

 

Modifiying the commited file and adding Lincense:

-------------------------------------------------

 

1) Added a file called License to the working dir

 

2) git status   #(reflects that one new file license is untracked)

 

3) git add <commited_file> License

 

OR ---

 

3) git add --all  #(adds all new or modified files)

 

4) git status     #(Again see the status, we have two files to be commited)

 

5) git commit -m "Add License and finish <newly_comited file> ."  #(creates a snapshot and add over time line)

 

6) Now we have two files commited

 

7) git log    #(shows the history) #(in larger projects -- commit messages are very important)

 

Different ways to add:

----------------------



 

1) git add <list of files>

 

2) git add all    #(all in working dir)

 

3) git add *.txt  #(wild cards allowed)

 

4) git add <absolute_path/file* --wildcard>

 

5) git add docs/  #(all files of the dir)

 

6) git add "*.txt" #(add all the txt files in the whole project)


Global:
-------


yum install -y curl policycoreutils-python openssh-server

yum install postfix

systemctl start postfix

curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | /bin/bash

EXTERNAL_URL="http://host.domain.com" yum install -y gitlab-ee

wget https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh

yum_repo_config_url="https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/config_file.repo?os=${os}&dist=${dist}&source=script"

Thank you for installing GitLab!
GitLab was unable to detect a valid hostname for your instance.
Please configure a URL for your GitLab instance by setting `external_url`
configuration in /etc/gitlab/gitlab.rb file.
Then, you can start your GitLab instance by running the following command:
  sudo gitlab-ctl reconfigure

Manual Installation:
--------------------

Downloading a GitLab Package
Installing the GitLab Package
Browse to the hostname and login 

EXTERNAL_URL="http://gitlab.example.com" rpm -i gitlab-ee-9.5.2-ee.0.el7.x86_64.rpm

Configuring the external URL for GitLab:
----------------------------------------

In order for GitLab to display correct repository clone links to your users it needs to know the URL under which it is reached by your users, e.g. http://gitlab.example.com. Add or edit the following line in /etc/gitlab/gitlab.rb:

external_url "http://gitlab.example.com"


Run "gitlab-ctl reconfigure" for the change to take effect

https://example.com/gitlab


Enable relative URL in GitLab:
==============================

Follow the steps below to enable relative URL in GitLab:
--------------------------------------------------------

1. (Optional) If you run short on resources, you can temporarily 	free up some memory by shutting down Unicorn and Sidekiq 	with the following command:

gitlab-ctl stop unicorn
gitlab-ctl stop sidekiq

2. Set the external_url in /etc/gitlab/gitlab.rb:

    external_url "https://example.com/gitlab"


In this example, the relative URL under which GitLab will be served will be /gitlab. Change it to your liking.


3. Reconfigure GitLab for the changes to take effect:

	gitlab-ctl reconfigure

4. Restart the services so that Unicorn and Sidekiq picks up the 	changes

	gitlab-ctl restart

Disable relative URL in GitLab:
-------------------------------

	gitlab-ctl restart unicorn

Relative URL troubleshooting:
-----------------------------

If you notice any issues with gitlab assets appearing broken after moving to a relative url configuration (like missing images or unresponsive components) please raise an issue in GitLab CE with the Frontend label.

If you are running a version prior to 8.17 and for some reason the asset compilation step fails (i.e. the server runs out of memory), you can execute the task manually after you addressed the issue (e.g. add swap):

	NO_PRIVILEGE_DROP=true USE_DB=false gitlab-rake assets:clean assets:precompile

	chown -R gi/var/opt/gitlab/gitlab-rails/tmp/cache 

Loading external configuration file from non-root user:
-------------------------------------------------------

Omnibus-gitlab package loads all configuration from /etc/gitlab/gitlab.rb file. This file has strict file permissions and is owned by the root user. The reason for strict permissions and ownership is that /etc/gitlab/gitlab.rb is being executed as Ruby code by the root user during gitlab-ctl reconfigure. This means that users who have write access to /etc/gitlab/gitlab.rb can add configuration that will be executed as code by root.

In certain organizations it is allowed to have access to the configuration files but not as the root user. You can include an external configuration file inside /etc/gitlab/gitlab.rb by specifying the path to the file:

from_file "/home/admin/external_gitlab.rb"


Please note that code you include into /etc/gitlab/gitlab.rb using from_file will run with root privileges when you run sudo gitlab-ctl reconfigure. Any configuration that is set in /etc/gitlab/gitlab.rb after from_file is included will take precedence over the configuration from the included file.


Storing Git data in an alternative directory :
-----------------------------------------------

By default, omnibus-gitlab stores the Git repository data under /var/opt/gitlab/git-data. The repositories are stored in a subfolder repositories. You can change the location of the git-data parent directory by adding the following line to /etc/gitlab/gitlab.rb.


git_data_dirs({ "default" => { "path" => "/mnt/nas/git-data" } })


You can also add more than one git data directory by adding the following lines to /etc/gitlab/gitlab.rb instead.


git_data_dirs({
  "default" => { "path" => "/var/opt/gitlab/git-data" },
  "alternative" => { "path" => "/mnt/nas/git-data" }
})


Note that the target directories and any of its subpaths must not be a symlink.

Run sudo gitlab-ctl reconfigure for the changes to take effect.

If you already have existing Git repositories in /var/opt/gitlab/git-data you can move them to the new location as follows:
---------------------------------------------------------------

# Prevent users from writing to the repositories while you move them.
sudo gitlab-ctl stop

# Note there is _no_ slash behind 'repositories', but there _is_ a
# slash behind 'git-data'.
sudo rsync -av /var/opt/gitlab/git-data/repositories /mnt/nas/git-data/

# Start the necessary processes and run reconfigure to fix permissions
# if necessary
sudo gitlab-ctl upgrade

# Double-check directory layout in /mnt/nas/git-data. Expected output:
# repositories
sudo ls /mnt/nas/git-data/

# Done! Start GitLab and verify that you can browse through the repositories in
# the web interface.
sudo gitlab-ctl start


Changing the name of the Git user / group: 
-----------------------------------------

By default, omnibus-gitLab uses the user name git for Git gitlab-shell login, ownership of the Git data itself, and SSH URL generation on the web interface. Similarly, git group is used for group ownership of the Git data.

We do not recommend changing the user/group of an existing installation because it can cause unpredictable side-effects. If you still want to do change the user and group, you can do so by adding the following lines to /etc/gitlab/gitlab.rb.

user['username'] = "gitlab"
user['group'] = "gitlab"

Run sudo gitlab-ctl reconfigure for the change to take effect.

Note that if you are changing the username of an existing installation, the reconfigure run won't change the ownership of the nested directories so you will have to do that manually. Make sure that the new user can access repositories as well as the uploads directory.

Specify numeric user and group identifiers:
-------------------------------------------

omnibus-gitlab creates users for GitLab, PostgreSQL, Redis and NGINX. You can specify the numeric identifiers for these users in /etc/gitlab/gitlab.rb as follows.


user['uid'] = 1234
user['gid'] = 1234
postgresql['uid'] = 1235
postgresql['gid'] = 1235
redis['uid'] = 1236
redis['gid'] = 1236
web_server['uid'] = 1237
web_server['gid'] = 1237


Run sudo gitlab-ctl reconfigure for the changes to take effect.

Disable user and group account management: 
----------------------------------------- 

By default, omnibus-gitlab takes care of creating system user and group accounts as well as keeping the information updated. These system accounts run various components of the package. Most users do not need to change this behaviour. However, if your system accounts are managed by other software, eg. LDAP, you might need to disable account management done by the package.

In order to disable user and group accounts management, in /etc/gitlab/gitlab.rb set:

manage_accounts['enable'] = false

Warning Omnibus-gitlab still expects users and groups to exist on the system where omnibus-gitlab package is installed.

By default, omnibus-gitlab package expects that following users exist:

# GitLab user (required)
git

# Web server user (required)
gitlab-www

# Redis user for GitLab (only when using packaged Redis)
gitlab-redis

# Postgresql user (only when using packaged Postgresql)
gitlab-psql

# Prometheus user for prometheus monitoring and various exporters
gitlab-prometheus

# GitLab Mattermost user (only when using GitLab Mattermost)
mattermost

# GitLab Registry user (only when using GitLab Registry)
registry

# GitLab Consul user (only when using GitLab Consul)
gitlab-consul


By default, omnibus-gitlab package expects that following groups exist:

# GitLab group (required)
git

# Web server group (required)
gitlab-www

# Redis group for GitLab (only when using packaged Redis)
gitlab-redis

# Postgresql group (only when using packaged Postgresql)
gitlab-psql

# Prometheus user for prometheus monitoring and various exporters
gitlab-prometheus

# GitLab Mattermost group (only when using GitLab Mattermost)
mattermost

# GitLab Registry group (only when using GitLab Registry)
registry

# GitLab Consul group (only when using GitLab Consul)
gitlab-consul

You can also use different user/group names but then you must specify user/group details in /etc/gitlab/gitlab.rb, eg.


# Do not manage user/group accounts
manage_accounts['enable'] = false

# GitLab
user['username'] = "custom-gitlab"
user['group'] = "custom-gitlab"
user['shell'] = "/bin/sh"
user['home'] = "/var/opt/custom-gitlab"

# Web server
web_server['username'] = 'webserver-gitlab'
web_server['group'] = 'webserver-gitlab'
web_server['shell'] = '/bin/false'
web_server['home'] = '/var/opt/gitlab/webserver'

# Postgresql (not needed when using external Postgresql)
postgresql['username'] = "postgres-gitlab"
postgresql['shell'] = "/bin/sh"
postgresql['home'] = "/var/opt/postgres-gitlab"

# Redis (not needed when using external Redis)
redis['username'] = "redis-gitlab"
redis['shell'] = "/bin/false"
redis['home'] = "/var/opt/redis-gitlab"

# And so on for users/groups for GitLab Mattermost

Disable storage directories management:
---------------------------------------

The omnibus-gitlab package takes care of creating all the necessary directories with the correct ownership and permissions, as well as keeping this updated.

Some of these directories will hold large amount of data so in certain setups, these directories will most likely be mounted on a NFS (or some other) share.

Some types of mounts won't allow automatic creation of directories by root user (default user for initial setup), eg. NFS with root_squash enabled on the share. To work around this the omnibus-gitlab package will attempt to create these directories using the directory's owner user.

If you have the /etc/gitlab directory mounted, you can turn off management of that directory.

In /etc/gitlab/gitlab.rb set:
-----------------------------

manage_storage_directories['manage_etc'] = false


If you are mounting all GitLab's storage directories, each on a seperate mount, you should completely disable the management of storage directories.

In order to disable management of these directories, in /etc/gitlab/gitlab.rb set:

manage_storage_directories['enable'] = false


http://gitlab.example.com/gowri/my-new-project.git

___________________________________________________________
FROM VEECUBE GIT PROJECT:
-------------------------

Git global setup:

git config --global user.name "vel"
git config --global user.email "myself@veecube.com"

Create a new repository:

git clone http://gitlab.example.com/myself/My_First_Project.git
cd My_First_Project
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder:

cd existing_folder
git init
git remote add origin http://gitlab.example.com/myself/My_First_Project.git
(or)
git@gitlab.example.com:myself/My_First_Project.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository:

cd existing_repo
git remote rename origin old-origin
git remote add origin http://gitlab.example.com/myself/My_First_Project.git
git push -u origin --all
git push -u origin --tags


RSA SSH Keygen with mail id:

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"



git@gowri.veecube.com:myself/My_First_Project.git
